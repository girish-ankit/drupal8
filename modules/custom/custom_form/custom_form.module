<?php

function custom_form_preprocess_image_widget(&$variables) {
    $element = $variables['element'];
    $name = $element['#name'];
    // print_r($variables); die();

    $variables['attributes'] = array('class' => array('image-widget', 'js-form-managed-file', 'form-managed-file', 'clearfix'));

    if (!empty($element['fids']['#value'])) {

        $file = reset($element['#files']);

        $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">Ankit(' . format_size($file->getSize()) . ')</span> ';

        $file_variables = array(
            'style_name' => $element['#preview_image_style'],
            'uri' => $file->getFileUri(),
        );

        // Determine image dimensions.
        if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
            $file_variables['width'] = $element['#value']['width'];
            $file_variables['height'] = $element['#value']['height'];
        } else {
            $image = \Drupal::service('image.factory')->get($file->getFileUri());
            if ($image->isValid()) {
                $file_variables['width'] = $image->getWidth();
                $file_variables['height'] = $image->getHeight();
            } else {
                $file_variables['width'] = $file_variables['height'] = NULL;
            }
        }

        $element['preview'] = array(
            '#weight' => -10,
            '#theme' => 'image_style',
            '#width' => $file_variables['width'],
            '#height' => $file_variables['height'],
            '#style_name' => $file_variables['style_name'],
            '#uri' => $file_variables['uri'],
        );

        // Store the dimensions in the form so the file doesn't have to be
        // accessed again. This is important for remote files.
        $element['width'] = array(
            '#type' => 'hidden',
            '#value' => $file_variables['width'],
        );
        $element['height'] = array(
            '#type' => 'hidden',
            '#value' => $file_variables['height'],
        );
    }

    $variables['data'] = array();
    foreach (\Drupal\Core\Render\Element::children($element) as $child) {
        $variables['data'][$child] = $element[$child];
    }
}

function ankit_preprocess_file_link(&$variables) {

    $file = $variables['file'];
    
    /***/
   // $data = print_r($file, true);
    
    $b = array (
    'm' => time(), 
    'foo' => 'bar', 
    'x' => array ('x', 'y', 'z'));

    $results = print_r($b, true); 
        

    $log_file = fopen("/var/www/html/test.log", "w");
    fwrite($log_file, $results);
    fclose($log_file);
    
    /***/

    $options = array();

    $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
    // @todo Wrap in file_url_transform_relative(). This is currently
    // impossible. As a work-around, we currently add the 'url.site' cache context
    // to ensure different file URLs are generated for different sites in a
    // multisite setup, including HTTP and HTTPS versions of the same site.
    // Fix in https://www.drupal.org/node/2646744.
    $url = file_create_url($file_entity->getFileUri());
    $variables['#cache']['contexts'][] = 'url.site';

    $mime_type = $file->getMimeType();
    // Set options as per anchor format described at
    // http://microformats.org/wiki/file-format-examples
    $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

    // Use the description as the link text if available.
    if (empty($variables['description'])) {
        $link_text = $file_entity->getFilename();
    } else {
        $link_text = $variables['description'];
        $options['attributes']['title'] = $file_entity->getFilename();
    }

    // Classes to add to the file field for icons.
    $classes = array(
        'file',
        // Add a specific class for each and every mime type.
        'file--mime-' . strtr($mime_type, array('/' => '-', '.' => '-')),
        // Add a more general class for groups of well known MIME types.
        'file--' . file_icon_class($mime_type),
    );

    // Set file classes to the options array.
    $variables['attributes'] = new Attribute($variables['attributes']);
    $variables['attributes']->addClass($classes);

    $variables['link'] = \Drupal::l($link_text, Url::fromUri($url, $options));
    return $variables;
}
